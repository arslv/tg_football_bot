from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite
from datetime import date, timedelta, datetime

from config import ROLE_PARENT
from database import db
from keyboards import get_back_button, get_parent_menu
from states import ParentStates

parent_router = Router()


@parent_router.callback_query(F.data == "my_children")
async def my_children_handler(callback: CallbackQuery):
    """–ú–æ–∏ –¥–µ—Ç–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    children = await db.get_children_by_parent(user['id'])

    if not children:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    text = "üë∂ –í–∞—à–∏ –¥–µ—Ç–∏:\n\n"
    for child in children:
        text += f"‚Ä¢ {child['full_name']}\n"
        text += f"  üë• –ì—Ä—É–ø–ø–∞: {child['group_name']}\n"
        text += f"  üè¢ –§–∏–ª–∏–∞–ª: {child['branch_name']}\n\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())


@parent_router.callback_query(F.data == "attendance_history")
async def attendance_history_handler(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    children = await db.get_children_by_parent(user['id'])

    if not children:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    if len(children) == 1:
        # –ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        await show_child_attendance(callback, children[0]['id'], children[0]['full_name'])
    else:
        # –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–∞—ë–º –≤—ã–±—Ä–∞—Ç—å
        keyboard = InlineKeyboardBuilder()
        for child in children:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë∂ {child['full_name']}",
                    callback_data=f"child_attendance_{child['id']}"
                )
            )
        keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

        await callback.message.edit_text(
            "üë∂ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:",
            reply_markup=keyboard.as_markup()
        )


@parent_router.callback_query(F.data.startswith("child_attendance_"))
async def child_attendance_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—ë–Ω–∫–µ
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT full_name FROM children WHERE id = ?", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

    if child:
        await show_child_attendance(callback, child_id, child['full_name'])


async def show_child_attendance(callback: CallbackQuery, child_id: int, child_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"""
    month_ago = date.today() - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        async with conn.execute(
                """SELECT a.status, s.type, s.start_time, g.name as group_name, t.full_name as trainer_name
                   FROM attendance a
                   JOIN sessions s ON a.session_id = s.id
                   JOIN groups_table g ON s.group_id = g.id
                   JOIN trainers t ON s.trainer_id = t.id
                   WHERE a.child_id = ? AND DATE(s.start_time) >= ?
                   ORDER BY s.start_time DESC
                   LIMIT 20""", (child_id, month_ago.isoformat())
        ) as cursor:
            attendance_records = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_sessions,
                       SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) as present_count
                   FROM attendance a
                   JOIN sessions s ON a.session_id = s.id
                   WHERE a.child_id = ? AND DATE(s.start_time) >= ?""", (child_id, month_ago.isoformat())
        ) as cursor:
            stats = await cursor.fetchone()

    if not attendance_records:
        await callback.message.edit_text(
            f"üë∂ {child_name}\n\n"
            f"‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ—Ç.",
            reply_markup=get_back_button()
        )
        return

    total_sessions = stats['total_sessions']
    present_count = stats['present_count']
    attendance_rate = (present_count / total_sessions * 100) if total_sessions > 0 else 0

    text = (
        f"üë∂ {child_name}\n"
        f"üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü\n\n"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"
        f"   –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {present_count}\n"
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è: {attendance_rate:.1f}%\n\n"
        f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n"
    )

    for record in attendance_records[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        start_time = record['start_time']
        if isinstance(start_time, str):
            start_time = datetime.fromisoformat(start_time)

        status_emoji = "‚úÖ" if record['status'] == 'present' else "‚ùå"
        session_type = "üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if record['type'] == 'training' else "‚öΩ –ò–≥—Ä–∞"

        text += f"{status_emoji} {start_time.strftime('%d.%m')} - {session_type}\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())


@parent_router.callback_query(F.data == "payment_history")
async def payment_history_handler(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    children = await db.get_children_by_parent(user['id'])

    if not children:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    if len(children) == 1:
        # –ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ–ø–ª–∞—Ç—ã
        await show_child_payments(callback, children[0]['id'], children[0]['full_name'])
    else:
        # –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–∞—ë–º –≤—ã–±—Ä–∞—Ç—å
        keyboard = InlineKeyboardBuilder()
        for child in children:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë∂ {child['full_name']}",
                    callback_data=f"child_payments_{child['id']}"
                )
            )
        keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

        await callback.message.edit_text(
            "üë∂ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç:",
            reply_markup=keyboard.as_markup()
        )


@parent_router.callback_query(F.data.startswith("child_payments_"))
async def child_payments_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—ë–Ω–∫–µ
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT full_name FROM children WHERE id = ?", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

    if child:
        await show_child_payments(callback, child_id, child['full_name'])


async def show_child_payments(callback: CallbackQuery, child_id: int, child_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–ª–∞—Ç —Ä–µ–±—ë–Ω–∫–∞"""
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Ä–µ–±—ë–Ω–∫–∞
        async with conn.execute(
                """SELECT p.amount, p.month_year, p.payment_date, p.status, p.cashbox_date,
                          t.full_name as trainer_name
                   FROM payments p
                   JOIN trainers t ON p.trainer_id = t.id
                   WHERE p.child_id = ?
                   ORDER BY p.payment_date DESC""", (child_id,)
        ) as cursor:
            payments = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_payments,
                       SUM(amount) as total_amount,
                       SUM(CASE WHEN status = 'in_cashbox' THEN amount ELSE 0 END) as paid_amount
                   FROM payments
                   WHERE child_id = ?""", (child_id,)
        ) as cursor:
            stats = await cursor.fetchone()

    if not payments:
        await callback.message.edit_text(
            f"üë∂ {child_name}\n\n"
            f"‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞.",
            reply_markup=get_back_button()
        )
        return

    total_payments = stats['total_payments']
    total_amount = stats['total_amount']
    paid_amount = stats['paid_amount']
    pending_amount = total_amount - paid_amount

    text = (
        f"üë∂ {child_name}\n"
        f"üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"   –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
        f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.0f} —Å—É–º\n"
        f"   –°–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É: {paid_amount:.0f} —Å—É–º\n"
        f"   –£ —Ç—Ä–µ–Ω–µ—Ä–∞: {pending_amount:.0f} —Å—É–º\n\n"
        f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
    )

    # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    months_ru = {
        '01': '–Ø–Ω–≤', '02': '–§–µ–≤', '03': '–ú–∞—Ä', '04': '–ê–ø—Ä',
        '05': '–ú–∞–π', '06': '–ò—é–Ω', '07': '–ò—é–ª', '08': '–ê–≤–≥',
        '09': '–°–µ–Ω', '10': '–û–∫—Ç', '11': '–ù–æ—è', '12': '–î–µ–∫'
    }

    for payment in payments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        payment_date = payment['payment_date']
        if isinstance(payment_date, str):
            payment_date = datetime.fromisoformat(payment_date)

        year, month = payment['month_year'].split('-')
        month_name = months_ru.get(month, month)

        status_emoji = "‚úÖ" if payment['status'] == 'in_cashbox' else "‚è≥"
        status_text = "–í –∫–∞—Å—Å–µ" if payment['status'] == 'in_cashbox' else "–£ —Ç—Ä–µ–Ω–µ—Ä–∞"

        text += (
            f"{status_emoji} {payment['amount']:.0f} —Å—É–º - {month_name} {year}\n"
            f"   {payment_date.strftime('%d.%m.%Y')} - {status_text}\n"
        )

    await callback.message.edit_text(text, reply_markup=get_back_button())