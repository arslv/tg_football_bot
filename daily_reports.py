import asyncio
import aiosqlite
from datetime import datetime, date
from aiogram import Bot
from database import db


class DailyReportService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ 21:00"""
        try:
            today = date.today().isoformat()

            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                async with conn.execute(
                        """SELECT s.*, g.name as group_name, b.name as branch_name, 
                                  t.full_name as trainer_name, t.id as trainer_id
                           FROM sessions s 
                           JOIN groups_table g ON s.group_id = g.id 
                           JOIN branches b ON g.branch_id = b.id 
                           JOIN trainers t ON s.trainer_id = t.id 
                           WHERE DATE(s.start_time) = ?
                           ORDER BY s.start_time""", (today,)
                ) as cursor:
                    sessions = await cursor.fetchall()

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
                async with conn.execute(
                        """SELECT b.name as branch_name, 
                                  COUNT(DISTINCT s.id) as sessions_count,
                                  COUNT(DISTINCT CASE WHEN a.status = 'present' THEN a.child_id END) as present_count,
                                  COUNT(DISTINCT a.child_id) as total_children,
                                  COALESCE(SUM(CASE WHEN DATE(p.payment_date) = ? THEN p.amount ELSE 0 END), 0) as received_money,
                                  COALESCE(SUM(CASE WHEN DATE(p.cashbox_date) = ? THEN p.amount ELSE 0 END), 0) as cashbox_money
                           FROM branches b 
                           LEFT JOIN groups_table g ON b.id = g.branch_id 
                           LEFT JOIN sessions s ON g.id = s.group_id AND DATE(s.start_time) = ?
                           LEFT JOIN attendance a ON s.id = a.session_id 
                           LEFT JOIN children c ON g.id = c.group_id 
                           LEFT JOIN payments p ON c.id = p.child_id
                           GROUP BY b.id, b.name 
                           ORDER BY b.name""", (today, today, today)
                ) as cursor:
                    branch_stats = await cursor.fetchall()

                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                async with conn.execute(
                        """SELECT s.*, t.full_name as trainer_name, g.name as group_name
                           FROM sessions s 
                           JOIN trainers t ON s.trainer_id = t.id 
                           JOIN groups_table g ON s.group_id = g.id 
                           WHERE DATE(s.start_time) = ? AND s.status = 'started'""", (today,)
                ) as cursor:
                    unclosed_sessions = await cursor.fetchall()

                async with conn.execute(
                        "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
                ) as cursor:
                    main_trainers = await cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            today_date = date.today()
            report = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {today_date.strftime('%d.%m.%Y')}\n\n"

            if sessions:
                report += f"üìÖ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {len(sessions)}\n"
                training_count = sum(1 for s in sessions if s['type'] == 'training')
                game_count = sum(1 for s in sessions if s['type'] == 'game')
                report += f"üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {training_count}\n"
                report += f"‚öΩ –ò–≥—Ä—ã: {game_count}\n\n"

                report += "üè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º:\n"
                for branch in branch_stats:
                    if branch['sessions_count'] > 0:
                        report += (
                            f"üìç {branch['branch_name']}\n"
                            f"   –ó–∞–Ω—è—Ç–∏–π: {branch['sessions_count']}\n"
                            f"   –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ: {branch['present_count']}/{branch['total_children']}\n"
                            f"   –ü–æ–ª—É—á–µ–Ω–æ: {branch['received_money']:.0f} —Ä—É–±.\n"
                            f"   –°–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É: {branch['cashbox_money']:.0f} —Ä—É–±.\n\n"
                        )

                if unclosed_sessions:
                    report += "‚ö†Ô∏è –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n"
                    for session in unclosed_sessions:
                        start_time = session['start_time']
                        if isinstance(start_time, str):
                            start_time = datetime.fromisoformat(start_time)
                        report += f"‚Ä¢ {session['trainer_name']} - {session['group_name']} (—Å {start_time.strftime('%H:%M')})\n"
            else:
                report += "–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
            for trainer in main_trainers:
                try:
                    await self.bot.send_message(trainer['telegram_id'], report)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
async def schedule_daily_reports(bot: Bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    import schedule
    import time

    daily_report_service = DailyReportService(bot)

    def job():
        asyncio.create_task(daily_report_service.send_daily_report())

    schedule.every().day.at("21:00").do(job)

    while True:
        schedule.run_pending()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É