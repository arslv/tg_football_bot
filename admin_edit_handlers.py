from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite

from config import ROLE_MAIN_TRAINER
from database import db
from keyboards import get_back_button, get_main_trainer_menu
from states import AdminStates

admin_edit_router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
async def is_main_trainer(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user['role'] == ROLE_MAIN_TRAINER


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –§–ò–õ–ò–ê–õ–û–í

@admin_edit_router.callback_query(F.data.startswith("branch_info_"))
async def branch_info_with_actions(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    branch_id = int(callback.data.split("_")[2])
    is_main = await is_main_trainer(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        async with conn.execute("SELECT * FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

        async with conn.execute("SELECT full_name FROM trainers WHERE branch_id = ?", (branch_id,)) as cursor:
            trainers = await cursor.fetchall()

        async with conn.execute("SELECT COUNT(*) FROM groups_table WHERE branch_id = ?", (branch_id,)) as cursor:
            groups_count = (await cursor.fetchone())[0]

        async with conn.execute(
                """SELECT COUNT(*) FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   WHERE g.branch_id = ?""", (branch_id,)
        ) as cursor:
            children_count = (await cursor.fetchone())[0]

    if not branch:
        await callback.message.edit_text("–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainers_text = "\n".join([f"‚Ä¢ {t['full_name']}" for t in trainers]) or "–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤"

    text = (
        f"üè¢ {branch['name']}\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {branch['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã ({len(trainers)}):\n{trainers_text}\n\n"
        f"üë• –ì—Ä—É–ø–ø: {groups_count}\n"
        f"üë∂ –î–µ—Ç–µ–π: {children_count}"
    )

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
    keyboard.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_branch_{branch_id}"))

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    if is_main:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_branch_{branch_id}"))

    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="mt_branches"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –¢–†–ï–ù–ï–†–û–í

@admin_edit_router.callback_query(F.data.startswith("trainer_info_"))
async def trainer_info_with_actions(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    trainer_id = int(callback.data.split("_")[2])
    is_main = await is_main_trainer(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        async with conn.execute(
                """SELECT t.*, b.name as branch_name, u.first_name, u.last_name, u.username
                   FROM trainers t 
                   JOIN branches b ON t.branch_id = b.id 
                   LEFT JOIN users u ON t.user_id = u.id 
                   WHERE t.id = ?""", (trainer_id,)
        ) as cursor:
            trainer = await cursor.fetchone()

        async with conn.execute("SELECT name FROM groups_table WHERE trainer_id = ?", (trainer_id,)) as cursor:
            groups = await cursor.fetchall()

        async with conn.execute(
                """SELECT COUNT(*) FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   WHERE g.trainer_id = ?""", (trainer_id,)
        ) as cursor:
            children_count = (await cursor.fetchone())[0]

    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    groups_text = "\n".join([f"‚Ä¢ {g['name']}" for g in groups]) or "–ù–µ—Ç –≥—Ä—É–ø–ø"
    telegram_info = "‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω" if trainer['user_id'] else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"

    text = (
        f"üë®‚Äçüè´ {trainer['full_name']}\n\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {trainer['branch_name']}\n"
        f"üì± Telegram: {telegram_info}\n"
        f"üë• –ì—Ä—É–ø–ø: {len(groups)}\n"
        f"üë∂ –î–µ—Ç–µ–π: {children_count}\n\n"
        f"üìã –ì—Ä—É–ø–ø—ã:\n{groups_text}"
    )

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
    keyboard.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_trainer_{trainer_id}"))

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    if is_main:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_trainer_{trainer_id}"))

    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="mt_trainers"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ü–ü

@admin_edit_router.callback_query(F.data.startswith("group_info_"))
async def group_info_with_actions(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    group_id = int(callback.data.split("_")[2])
    is_main = await is_main_trainer(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name,
                          COUNT(c.id) as children_count
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   LEFT JOIN children c ON g.id = c.group_id
                   WHERE g.id = ?
                   GROUP BY g.id""", (group_id,)
        ) as cursor:
            group = await cursor.fetchone()

        async with conn.execute(
                "SELECT full_name FROM children WHERE group_id = ? ORDER BY full_name", (group_id,)
        ) as cursor:
            children = await cursor.fetchall()

    if not group:
        await callback.message.edit_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_button())
        return

    children_text = "\n".join([f"‚Ä¢ {c['full_name']}" for c in children]) or "–ù–µ—Ç –¥–µ—Ç–µ–π"

    text = (
        f"üë• {group['name']}\n\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {group['branch_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {group['trainer_name']}\n"
        f"üë∂ –î–µ—Ç–µ–π: {group['children_count']}\n\n"
        f"üìã –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π:\n{children_text}"
    )

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
    keyboard.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_group_{group_id}"))

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    if is_main:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_group_{group_id}"))

    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="view_groups"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_edit_router.callback_query(F.data == "view_groups")
async def view_groups_with_edit(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name,
                          COUNT(c.id) as children_count
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   LEFT JOIN children c ON g.id = c.group_id
                   GROUP BY g.id, b.name, t.full_name
                   ORDER BY b.name, g.name"""
        ) as cursor:
            groups = await cursor.fetchall()

    if not groups:
        await callback.message.edit_text(
            "‚ùå –ì—Ä—É–ø–ø –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_back_button()
        )
        return

    keyboard = InlineKeyboardBuilder()
    for group in groups:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë• {group['name']} ({group['branch_name']}, {group['children_count']} –¥–µ—Ç–µ–π)",
                callback_data=f"group_info_{group['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="mt_groups"))

    await callback.message.edit_text(
        "üë• –í—Å–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):",
        reply_markup=keyboard.as_markup()
    )


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–ò–ê–õ–û–í
@admin_edit_router.callback_query(F.data.startswith("edit_branch_"))
async def edit_branch_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞"""
    branch_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT * FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

    if not branch:
        await callback.message.edit_text("–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    await state.update_data(editing_branch_id=branch_id, current_name=branch['name'], current_address=branch['address'])
    await state.set_state(AdminStates.editing_branch_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_branch_address_only"))
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"branch_info_{branch_id}"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {branch['name']}\n"
        f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {branch['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.message(StateFilter(AdminStates.editing_branch_name))
async def process_edit_branch_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞"""
    new_name = message.text.strip()
    data = await state.get_data()

    await state.update_data(new_name=new_name)
    await state.set_state(AdminStates.editing_branch_address)

    await message.answer(
        f"‚úèÔ∏è –§–∏–ª–∏–∞–ª: {new_name}\n\n"
        f"–°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å: {data['current_address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å):",
        reply_markup=get_back_button()
    )


@admin_edit_router.callback_query(F.data == "edit_branch_address_only", StateFilter(AdminStates.editing_branch_name))
async def edit_branch_address_only(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–∞"""
    data = await state.get_data()
    await state.set_state(AdminStates.editing_branch_address)

    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–∞\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['current_name']}\n"
        f"–°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å: {data['current_address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
        reply_markup=get_back_button()
    )


@admin_edit_router.message(StateFilter(AdminStates.editing_branch_address))
async def process_edit_branch_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–∞"""
    data = await state.get_data()
    new_address = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else data['current_address']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ
    final_name = data.get('new_name', data['current_name'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª
    async with aiosqlite.connect(db.db_path) as conn:
        await conn.execute(
            "UPDATE branches SET name = ?, address = ? WHERE id = ?",
            (final_name, new_address, data['editing_branch_id'])
        )
        await conn.commit()

    await message.answer(
        f"‚úÖ –§–∏–ª–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {final_name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {new_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ï–ù–ï–†–û–í
@admin_edit_router.callback_query(F.data.startswith("edit_trainer_"))
async def edit_trainer_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    trainer_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT t.*, b.name as branch_name 
                   FROM trainers t 
                   JOIN branches b ON t.branch_id = b.id 
                   WHERE t.id = ?""", (trainer_id,)
        ) as cursor:
            trainer = await cursor.fetchone()

    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    await state.update_data(
        editing_trainer_id=trainer_id,
        current_name=trainer['full_name'],
        current_branch_id=trainer['branch_id']
    )
    await state.set_state(AdminStates.editing_trainer_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª–∏–∞–ª", callback_data="edit_trainer_branch_only"))
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"trainer_info_{trainer_id}"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {trainer['full_name']}\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª: {trainer['branch_name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.message(StateFilter(AdminStates.editing_trainer_name))
async def process_edit_trainer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    new_name = message.text.strip()
    data = await state.get_data()

    await state.update_data(new_name=new_name)
    await state.set_state(AdminStates.editing_trainer_branch)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id, name FROM branches ORDER BY name") as cursor:
            branches = await cursor.fetchall()

    keyboard = InlineKeyboardBuilder()
    for branch in branches:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üè¢ {branch['name']}",
                callback_data=f"select_edit_branch_{branch['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await message.answer(
        f"‚úèÔ∏è –¢—Ä–µ–Ω–µ—Ä: {new_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data == "edit_trainer_branch_only", StateFilter(AdminStates.editing_trainer_name))
async def edit_trainer_branch_only(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª–∞ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await state.set_state(AdminStates.editing_trainer_branch)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT id, name FROM branches ORDER BY name") as cursor:
            branches = await cursor.fetchall()

    keyboard = InlineKeyboardBuilder()
    for branch in branches:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üè¢ {branch['name']}",
                callback_data=f"select_edit_branch_{branch['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data.startswith("select_edit_branch_"),
                                  StateFilter(AdminStates.editing_trainer_branch))
async def select_edit_trainer_branch(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    branch_id = int(callback.data.split("_")[3])
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è: –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ
    final_name = data.get('new_name', data['current_name'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.execute(
            "UPDATE trainers SET full_name = ?, branch_id = ? WHERE id = ?",
            (final_name, branch_id, data['editing_trainer_id'])
        )
        await conn.commit()

        async with conn.execute("SELECT name FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üë®‚Äçüè´ –ò–º—è: {final_name}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch['name']}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü
@admin_edit_router.callback_query(F.data.startswith("edit_group_"))
async def edit_group_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name 
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   WHERE g.id = ?""", (group_id,)
        ) as cursor:
            group = await cursor.fetchone()

    if not group:
        await callback.message.edit_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_button())
        return

    await state.update_data(
        editing_group_id=group_id,
        current_name=group['name'],
        current_trainer_id=group['trainer_id'],
        current_branch_id=group['branch_id']
    )
    await state.set_state(AdminStates.editing_group_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="edit_group_trainer_only"))
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"group_info_{group_id}"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {group['name']}\n"
        f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–µ—Ä: {group['trainer_name']}\n"
        f"–§–∏–ª–∏–∞–ª: {group['branch_name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.message(StateFilter(AdminStates.editing_group_name))
async def process_edit_group_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    new_name = message.text.strip()
    data = await state.get_data()

    await state.update_data(new_name=new_name)
    await state.set_state(AdminStates.editing_group_trainer)

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT id, full_name FROM trainers WHERE branch_id = ? ORDER BY full_name",
                (data['current_branch_id'],)
        ) as cursor:
            trainers = await cursor.fetchall()

    keyboard = InlineKeyboardBuilder()
    for trainer in trainers:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë®‚Äçüè´ {trainer['full_name']}",
                callback_data=f"select_edit_group_trainer_{trainer['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await message.answer(
        f"‚úèÔ∏è –ì—Ä—É–ø–ø–∞: {new_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data == "edit_group_trainer_only", StateFilter(AdminStates.editing_group_name))
async def edit_group_trainer_only(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    data = await state.get_data()
    await state.set_state(AdminStates.editing_group_trainer)

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT id, full_name FROM trainers WHERE branch_id = ? ORDER BY full_name",
                (data['current_branch_id'],)
        ) as cursor:
            trainers = await cursor.fetchall()

    keyboard = InlineKeyboardBuilder()
    for trainer in trainers:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë®‚Äçüè´ {trainer['full_name']}",
                callback_data=f"select_edit_group_trainer_{trainer['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –≥—Ä—É–ø–ø—ã\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data.startswith("select_edit_group_trainer_"),
                                  StateFilter(AdminStates.editing_group_trainer))
async def select_edit_group_trainer(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    trainer_id = int(callback.data.split("_")[4])
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ
    final_name = data.get('new_name', data['current_name'])

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.execute(
            "UPDATE groups_table SET name = ?, trainer_id = ? WHERE id = ?",
            (final_name, trainer_id, data['editing_group_id'])
        )
        await conn.commit()

        async with conn.execute("SELECT full_name FROM trainers WHERE id = ?", (trainer_id,)) as cursor:
            trainer = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {final_name}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer['full_name']}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø (–¢–û–õ–¨–ö–û –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –¢–†–ï–ù–ï–†–ê)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
@admin_edit_router.callback_query(F.data.startswith("delete_branch_"))
async def delete_branch_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    branch_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

        async with conn.execute("SELECT COUNT(*) FROM trainers WHERE branch_id = ?", (branch_id,)) as cursor:
            trainers_count = (await cursor.fetchone())[0]

        async with conn.execute("SELECT COUNT(*) FROM groups_table WHERE branch_id = ?", (branch_id,)) as cursor:
            groups_count = (await cursor.fetchone())[0]

    if not branch:
        await callback.message.edit_text("–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_branch_{branch_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"branch_info_{branch_id}")
    )

    warning = ""
    if trainers_count > 0 or groups_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n‚Ä¢ –¢—Ä–µ–Ω–µ—Ä–æ–≤: {trainers_count}\n‚Ä¢ –ì—Ä—É–ø–ø: {groups_count}\n‚Ä¢ –í—Å–µ—Ö –¥–µ—Ç–µ–π –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª–∏–∞–ª '{branch['name']}'?{warning}",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data.startswith("confirm_delete_branch_"))
async def confirm_delete_branch(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    branch_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

        if branch:
            await conn.execute("DELETE FROM branches WHERE id = ?", (branch_id,))
            await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –§–∏–ª–∏–∞–ª '{branch['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_main_trainer_menu()
    )


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
@admin_edit_router.callback_query(F.data.startswith("delete_trainer_"))
async def delete_trainer_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    trainer_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT full_name FROM trainers WHERE id = ?", (trainer_id,)) as cursor:
            trainer = await cursor.fetchone()

        async with conn.execute("SELECT COUNT(*) FROM groups_table WHERE trainer_id = ?", (trainer_id,)) as cursor:
            groups_count = (await cursor.fetchone())[0]

    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_trainer_{trainer_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"trainer_info_{trainer_id}")
    )

    warning = ""
    if groups_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n‚Ä¢ –ì—Ä—É–ø–ø: {groups_count}\n‚Ä¢ –í—Å–µ—Ö –¥–µ—Ç–µ–π –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ '{trainer['full_name']}'?{warning}",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data.startswith("confirm_delete_trainer_"))
async def confirm_delete_trainer(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    trainer_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT full_name FROM trainers WHERE id = ?", (trainer_id,)) as cursor:
            trainer = await cursor.fetchone()

        if trainer:
            await conn.execute("DELETE FROM trainers WHERE id = ?", (trainer_id,))
            await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –¢—Ä–µ–Ω–µ—Ä '{trainer['full_name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_main_trainer_menu()
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@admin_edit_router.callback_query(F.data.startswith("delete_group_"))
async def delete_group_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    group_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM groups_table WHERE id = ?", (group_id,)) as cursor:
            group = await cursor.fetchone()

        async with conn.execute("SELECT COUNT(*) FROM children WHERE group_id = ?", (group_id,)) as cursor:
            children_count = (await cursor.fetchone())[0]

        async with conn.execute("SELECT COUNT(*) FROM sessions WHERE group_id = ?", (group_id,)) as cursor:
            sessions_count = (await cursor.fetchone())[0]

    if not group:
        await callback.message.edit_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_button())
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_group_{group_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_info_{group_id}")
    )

    warning = ""
    if children_count > 0 or sessions_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n‚Ä¢ –î–µ—Ç–µ–π: {children_count}\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ —Å–µ—Å—Å–∏—è—Ö: {sessions_count}"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group['name']}'?{warning}\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard.as_markup()
    )


@admin_edit_router.callback_query(F.data.startswith("confirm_delete_group_"))
async def confirm_delete_group(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    group_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM groups_table WHERE id = ?", (group_id,)) as cursor:
            group = await cursor.fetchone()

        if group:
            await conn.execute("DELETE FROM groups_table WHERE id = ?", (group_id,))
            await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_main_trainer_menu()
    )