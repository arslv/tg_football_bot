from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite
from datetime import date, timedelta

from config import ROLE_MAIN_TRAINER
from database import db
from keyboards import get_back_button, get_main_trainer_menu
from states import AdminStates

child_info_router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
async def is_main_trainer(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user['role'] == ROLE_MAIN_TRAINER


@child_info_router.callback_query(F.data.startswith("child_info_"))
async def child_info_with_actions(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±—ë–Ω–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)"""
    child_id = int(callback.data.split("_")[2])
    is_main = await is_main_trainer(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name,
                          u.first_name || ' ' || u.last_name as parent_name, u.username as parent_username
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   JOIN users u ON c.parent_id = u.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        month_ago = date.today() - timedelta(days=30)

        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_sessions,
                       SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) as present_count
                   FROM attendance a
                   JOIN sessions s ON a.session_id = s.id
                   WHERE a.child_id = ? AND DATE(s.start_time) >= ?""", (child_id, month_ago.isoformat())
        ) as cursor:
            stats = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_payments,
                       SUM(amount) as total_amount,
                       SUM(CASE WHEN status = 'in_cashbox' THEN amount ELSE 0 END) as paid_amount
                   FROM payments WHERE child_id = ?""", (child_id,)
        ) as cursor:
            payment_stats = await cursor.fetchone()

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    total_sessions = stats['total_sessions'] or 0
    present_count = stats['present_count'] or 0
    attendance_rate = (present_count / total_sessions * 100) if total_sessions > 0 else 0

    total_payments = payment_stats['total_payments'] or 0
    total_amount = payment_stats['total_amount'] or 0
    paid_amount = payment_stats['paid_amount'] or 0

    parent_info = f"{child['parent_name']}"
    if child['parent_username']:
        parent_info += f" (@{child['parent_username']})"

    text = (
        f"üë∂ {child['full_name']}\n\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_info}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {child['group_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {child['trainer_name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {child['branch_name']}\n\n"
        f"üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü:\n"
        f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"
        f"   –ü–æ—Å–µ—Ç–∏–ª: {present_count}\n"
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {attendance_rate:.1f}%\n\n"
        f"üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n"
        f"   –í—Å–µ–≥–æ: {total_amount:.0f} —Å—É–º ({total_payments} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
        f"   –°–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É: {paid_amount:.0f} —Å—É–º"
    )

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
    keyboard.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_child_{child_id}"))

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    if is_main:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_child_{child_id}"))

    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="view_children"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ï–ô (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)

@child_info_router.callback_query(
    F.data.startswith("edit_child_") & ~F.data.contains("parent") & ~F.data.contains("group"))
async def edit_child_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.*, g.name as group_name, u.first_name || ' ' || u.last_name as parent_name
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN users u ON c.parent_id = u.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    await state.update_data(
        editing_child_id=child_id,
        current_name=child['full_name'],
        current_parent_id=child['parent_id'],
        current_group_id=child['group_id']
    )
    await state.set_state(AdminStates.editing_child_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data="edit_child_parent_only"))
    keyboard.row(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_child_group_only"))
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"child_info_{child_id}"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {child['full_name']}\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å: {child['parent_name']}\n"
        f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {child['group_name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboard.as_markup()
    )


# –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø (–¢–û–õ–¨–ö–û –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –¢–†–ï–ù–ï–†–ê)

@child_info_router.callback_query(F.data.startswith("delete_child_"))
async def delete_child_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    child_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.full_name, g.name as group_name
                   FROM children c
                   JOIN groups_table g ON c.group_id = g.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        async with conn.execute("SELECT COUNT(*) FROM attendance WHERE child_id = ?", (child_id,)) as cursor:
            attendance_count = (await cursor.fetchone())[0]

        async with conn.execute("SELECT COUNT(*) FROM payments WHERE child_id = ?", (child_id,)) as cursor:
            payments_count = (await cursor.fetchone())[0]

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_child_{child_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"child_info_{child_id}")
    )

    warning = ""
    if attendance_count > 0 or payments_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é:\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {attendance_count}\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ–± –æ–ø–ª–∞—Ç–∞—Ö: {payments_count}"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞ '{child['full_name']}'?\n"
        f"–ì—Ä—É–ø–ø–∞: {child['group_name']}{warning}\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard.as_markup()
    )


@child_info_router.callback_query(F.data.startswith("confirm_delete_child_"))
async def confirm_delete_child(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞"""
    if not await is_main_trainer(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", show_alert=True)
        return

    child_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT full_name FROM children WHERE id = ?", (child_id,)) as cursor:
            child = await cursor.fetchone()

        if child:
            await conn.execute("DELETE FROM children WHERE id = ?", (child_id,))
            await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ '{child['full_name']}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=get_main_trainer_menu()
    )