from aiogram import Router, F
from aiogram.types import CallbackQuery
import aiosqlite
from datetime import date, timedelta, datetime

from database import db
from keyboards import get_back_button

reports_router = Router()


@reports_router.callback_query(F.data == "report_week")
async def report_week(callback: CallbackQuery):
    """–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"""
    today = date.today()
    week_ago = today - timedelta(days=7)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –ó–∞–Ω—è—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        async with conn.execute(
                """SELECT s.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name
                   FROM sessions s 
                   JOIN groups_table g ON s.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON s.trainer_id = t.id 
                   WHERE DATE(s.start_time) >= ? 
                   ORDER BY s.start_time DESC
                   LIMIT 20""", (week_ago.isoformat(),)
        ) as cursor:
            sessions = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE DATE(start_time) >= ?", (week_ago.isoformat(),)
        ) as cursor:
            total_sessions = (await cursor.fetchone())[0]

        # –û–ø–ª–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(payment_date) >= ?", (week_ago.isoformat(),)
        ) as cursor:
            week_payments = (await cursor.fetchone())[0]

        # –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
        async with conn.execute(
                """SELECT ROUND(AVG(CASE WHEN a.status = 'present' THEN 100.0 ELSE 0.0 END), 1)
                   FROM attendance a 
                   JOIN sessions s ON a.session_id = s.id 
                   WHERE DATE(s.start_time) >= ?""", (week_ago.isoformat(),)
        ) as cursor:
            result = await cursor.fetchone()
            avg_attendance = result[0] if result[0] is not None else 0

    text = f"üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é ({week_ago.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')})\n\n"

    if total_sessions == 0:
        text += "‚ùå –ó–∞ –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ."
    else:
        training_count = sum(1 for s in sessions if s['type'] == 'training')
        game_count = sum(1 for s in sessions if s['type'] == 'game')

        text += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"
        text += f"   üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {training_count}\n"
        text += f"   ‚öΩ –ò–≥—Ä—ã: {game_count}\n"
        text += f"   üí∞ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–Ω–µ–≥: {week_payments:.0f} —Ä—É–±.\n"
        text += f"   üìà –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {avg_attendance}%\n\n"

        text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n"
        for session in sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            start_time = session['start_time']
            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time)

            session_type = "üèÉ" if session['type'] == 'training' else "‚öΩ"
            text += f"{session_type} {start_time.strftime('%d.%m %H:%M')} - {session['group_name']} ({session['trainer_name']})\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())


@reports_router.callback_query(F.data == "report_month")
async def report_month(callback: CallbackQuery):
    """–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü"""
    today = date.today()
    month_ago = today - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE DATE(start_time) >= ?", (month_ago.isoformat(),)
        ) as cursor:
            total_sessions = (await cursor.fetchone())[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–Ω—è—Ç–∏–π
        async with conn.execute(
                "SELECT type, COUNT(*) FROM sessions WHERE DATE(start_time) >= ? GROUP BY type",
                (month_ago.isoformat(),)
        ) as cursor:
            session_types = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        async with conn.execute(
                """SELECT b.name as branch_name, COUNT(s.id) as sessions_count,
                          COUNT(DISTINCT a.child_id) as unique_children,
                          ROUND(AVG(CASE WHEN a.status = 'present' THEN 100.0 ELSE 0.0 END), 1) as attendance_rate
                   FROM branches b
                   LEFT JOIN groups_table g ON b.id = g.branch_id
                   LEFT JOIN sessions s ON g.id = s.group_id AND DATE(s.start_time) >= ?
                   LEFT JOIN attendance a ON s.id = a.session_id
                   GROUP BY b.id, b.name
                   ORDER BY sessions_count DESC""", (month_ago.isoformat(),)
        ) as cursor:
            branch_stats = await cursor.fetchall()

        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(payment_date) >= ?", (month_ago.isoformat(),)
        ) as cursor:
            month_income = (await cursor.fetchone())[0]

        # –¢–æ–ø —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–Ω—è—Ç–∏–π
        async with conn.execute(
                """SELECT t.full_name, COUNT(s.id) as sessions_count
                   FROM trainers t
                   LEFT JOIN sessions s ON t.id = s.trainer_id AND DATE(s.start_time) >= ?
                   GROUP BY t.id, t.full_name
                   HAVING sessions_count > 0
                   ORDER BY sessions_count DESC
                   LIMIT 5""", (month_ago.isoformat(),)
        ) as cursor:
            top_trainers = await cursor.fetchall()

    text = f"üìä –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü ({month_ago.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')})\n\n"

    if total_sessions == 0:
        text += "‚ùå –ó–∞ –º–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ."
    else:
        text += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"

        for session_type in session_types:
            type_name = "üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if session_type['type'] == 'training' else "‚öΩ –ò–≥—Ä—ã"
            text += f"   {type_name}: {session_type[1]}\n"

        text += f"   üí∞ –î–æ—Ö–æ–¥—ã: {month_income:.0f} —Ä—É–±.\n\n"

        text += "üè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º:\n"
        for branch in branch_stats:
            if branch['sessions_count'] and branch['sessions_count'] > 0:
                attendance = branch['attendance_rate'] if branch['attendance_rate'] else 0
                text += f"   üìç {branch['branch_name']}: {branch['sessions_count']} –∑–∞–Ω—è—Ç–∏–π, –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å {attendance:.1f}%\n"

        text += "\nüèÜ –¢–æ–ø —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        for i, trainer in enumerate(top_trainers, 1):
            text += f"   {i}. {trainer['full_name']}: {trainer['sessions_count']} –∑–∞–Ω—è—Ç–∏–π\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())


@reports_router.callback_query(F.data == "report_finance")
async def report_finance(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"""
    today = date.today()
    month_ago = today - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å—ã
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'with_trainer'"
        ) as cursor:
            money_with_trainers = (await cursor.fetchone())[0]

        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'in_cashbox'"
        ) as cursor:
            money_in_cashbox = (await cursor.fetchone())[0]

        # –î–æ—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
        async with conn.execute(
                """SELECT month_year, COALESCE(SUM(amount), 0) as total
                   FROM payments 
                   GROUP BY month_year 
                   ORDER BY month_year DESC
                   LIMIT 6"""
        ) as cursor:
            monthly_income = await cursor.fetchall()

        # –¢–æ–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∏
        async with conn.execute(
                """SELECT c.full_name, COALESCE(SUM(p.amount), 0) as total_paid
                   FROM children c
                   LEFT JOIN payments p ON c.id = p.child_id
                   GROUP BY c.id, c.full_name
                   HAVING total_paid > 0
                   ORDER BY total_paid DESC
                   LIMIT 10"""
        ) as cursor:
            top_payers = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º (—Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Å–æ–±—Ä–∞–ª –∫–∞–∂–¥—ã–π)
        async with conn.execute(
                """SELECT t.full_name, 
                          COALESCE(SUM(CASE WHEN p.status = 'with_trainer' THEN p.amount ELSE 0 END), 0) as with_trainer,
                          COALESCE(SUM(CASE WHEN p.status = 'in_cashbox' THEN p.amount ELSE 0 END), 0) as in_cashbox,
                          COALESCE(SUM(p.amount), 0) as total
                   FROM trainers t
                   LEFT JOIN payments p ON t.id = p.trainer_id
                   GROUP BY t.id, t.full_name
                   HAVING total > 0
                   ORDER BY total DESC"""
        ) as cursor:
            trainer_finance = await cursor.fetchall()

    # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    months_ru = {
        '01': '–Ø–Ω–≤', '02': '–§–µ–≤', '03': '–ú–∞—Ä', '04': '–ê–ø—Ä',
        '05': '–ú–∞–π', '06': '–ò—é–Ω', '07': '–ò—é–ª', '08': '–ê–≤–≥',
        '09': '–°–µ–Ω', '10': '–û–∫—Ç', '11': '–ù–æ—è', '12': '–î–µ–∫'
    }

    text = f"üí∞ –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç\n\n"

    text += f"üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
    text += f"   –£ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: {money_with_trainers:.0f} —Ä—É–±.\n"
    text += f"   –í –∫–∞—Å—Å–µ: {money_in_cashbox:.0f} —Ä—É–±.\n"
    text += f"   –í—Å–µ–≥–æ: {money_with_trainers + money_in_cashbox:.0f} —Ä—É–±.\n\n"

    if monthly_income:
        text += "üìÖ –î–æ—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
        for month_data in monthly_income:
            year, month = month_data['month_year'].split('-')
            month_name = months_ru.get(month, month)
            text += f"   {month_name} {year}: {month_data['total']:.0f} —Ä—É–±.\n"
        text += "\n"

    if trainer_finance:
        text += "üë®‚Äçüè´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º:\n"
        for trainer in trainer_finance[:5]:  # –¢–æ–ø 5
            text += f"   {trainer['full_name']}: {trainer['total']:.0f} —Ä—É–±. "
            if trainer['with_trainer'] > 0:
                text += f"(—É —Ç—Ä–µ–Ω–µ—Ä–∞: {trainer['with_trainer']:.0f})\n"
            else:
                text += "(—Å–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É)\n"

    if top_payers:
        text += "\nüèÜ –¢–æ–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∏:\n"
        for i, payer in enumerate(top_payers[:5], 1):
            text += f"   {i}. {payer['full_name']}: {payer['total_paid']:.0f} —Ä—É–±.\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())