from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite
from datetime import datetime

from config import ROLE_MAIN_TRAINER, ROLE_TRAINER, ROLE_PARENT, ROLE_CASHIER
from database import db
from keyboards import get_back_button, get_main_trainer_menu
from states import AdminStates

admin_router = Router()


# –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–ò–ê–õ–ê–ú–ò

@admin_router.callback_query(F.data == "mt_branches")
async def manage_branches(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏"""
    branches = await db.get_all_branches()

    keyboard = InlineKeyboardBuilder()

    for branch in branches:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üè¢ {branch['name']}",
                callback_data=f"branch_info_{branch['id']}"
            )
        )

    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª", callback_data="add_branch")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data == "add_branch")
async def add_branch_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞"""
    await state.set_state(AdminStates.creating_branch_name)
    await callback.message.edit_text(
        "üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞:",
        reply_markup=get_back_button()
    )


@admin_router.message(StateFilter(AdminStates.creating_branch_name))
async def process_branch_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞"""
    branch_name = message.text.strip()

    await state.update_data(branch_name=branch_name)
    await state.set_state(AdminStates.creating_branch_address)

    await message.answer(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ñ–∏–ª–∏–∞–ª–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=get_back_button()
    )


@admin_router.message(StateFilter(AdminStates.creating_branch_address))
async def process_branch_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–∞"""
    data = await state.get_data()
    address = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None

    # –°–æ–∑–¥–∞—ë–º —Ñ–∏–ª–∏–∞–ª
    branch_id = await db.create_branch(data['branch_name'], address)

    await message.answer(
        f"‚úÖ –§–∏–ª–∏–∞–ª —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['branch_name']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî ID: {branch_id}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ï–ù–ï–†–ê–ú–ò

@admin_router.callback_query(F.data == "mt_trainers")
async def manage_trainers(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏"""
    trainers = await db.get_all_trainers()

    keyboard = InlineKeyboardBuilder()

    for trainer in trainers:
        status = "üü¢" if trainer['telegram_id'] else "üî¥"
        keyboard.row(
            InlineKeyboardButton(
                text=f"{status} {trainer['full_name']} ({trainer['branch_name']})",
                callback_data=f"trainer_info_{trainer['id']}"
            )
        )

    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="add_trainer")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏:\n\n"
        "üü¢ - –µ—Å—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç\n"
        "üî¥ - –Ω–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data == "add_trainer")
async def add_trainer_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await state.set_state(AdminStates.creating_trainer_name)
    await callback.message.edit_text(
        "üë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=get_back_button()
    )


@admin_router.message(StateFilter(AdminStates.creating_trainer_name))
async def process_trainer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    trainer_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    branches = await db.get_all_branches()

    if not branches:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª–∏–∞–ª!",
            reply_markup=get_main_trainer_menu()
        )
        await state.clear()
        return

    await state.update_data(trainer_name=trainer_name)
    await state.set_state(AdminStates.selecting_trainer_branch)

    keyboard = InlineKeyboardBuilder()
    for branch in branches:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üè¢ {branch['name']}",
                callback_data=f"select_branch_{branch['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await message.answer(
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("select_branch_"), StateFilter(AdminStates.selecting_trainer_branch))
async def select_trainer_branch(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    branch_id = int(callback.data.split("_")[2])
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–Ω–µ—Ä–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram
    trainer_id = await db.create_trainer(None, branch_id, data['trainer_name'])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT name FROM branches WHERE id = ?", (branch_id,)) as cursor:
            branch = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üë®‚Äçüè´ –ò–º—è: {data['trainer_name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch['name']}\n"
        f"üÜî ID: {trainer_id}\n\n"
        f"‚ÑπÔ∏è –¢—Ä–µ–Ω–µ—Ä —Å–º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò –ò –î–ï–¢–¨–ú–ò

@admin_router.callback_query(F.data == "mt_groups")
async def manage_groups(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –¥–µ—Ç—å–º–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø", callback_data="view_groups"),
        InlineKeyboardButton(text="üë∂ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–µ–π", callback_data="view_children")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞", callback_data="add_child")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –¥–µ—Ç—å–º–∏:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data == "add_group")
async def add_group_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    await state.set_state(AdminStates.creating_group_name)
    await callback.message.edit_text(
        "üë• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
        reply_markup=get_back_button()
    )


@admin_router.message(StateFilter(AdminStates.creating_group_name))
async def process_group_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    group_name = message.text.strip()

    branches = await db.get_all_branches()

    if not branches:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª–∏–∞–ª!",
            reply_markup=get_main_trainer_menu()
        )
        await state.clear()
        return

    await state.update_data(group_name=group_name)
    await state.set_state(AdminStates.selecting_group_branch)

    keyboard = InlineKeyboardBuilder()
    for branch in branches:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üè¢ {branch['name']}",
                callback_data=f"select_group_branch_{branch['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await message.answer(
        f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("select_group_branch_"), StateFilter(AdminStates.selecting_group_branch))
async def select_group_branch(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    branch_id = int(callback.data.split("_")[3])
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT * FROM trainers WHERE branch_id = ? ORDER BY full_name", (branch_id,)
        ) as cursor:
            trainers = await cursor.fetchall()

    if not trainers:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤.",
            reply_markup=get_back_button()
        )
        await state.clear()
        return

    await state.update_data(branch_id=branch_id)
    await state.set_state(AdminStates.selecting_group_trainer)

    keyboard = InlineKeyboardBuilder()
    for trainer in trainers:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë®‚Äçüè´ {trainer['full_name']}",
                callback_data=f"select_group_trainer_{trainer['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"üë• –ì—Ä—É–ø–ø–∞: {data['group_name']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("select_group_trainer_"),
                             StateFilter(AdminStates.selecting_group_trainer))
async def select_group_trainer(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    trainer_id = int(callback.data.split("_")[3])
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
    group_id = await db.create_group(data['group_name'], data['branch_id'], trainer_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id
                   JOIN trainers t ON g.trainer_id = t.id
                   WHERE g.id = ?""", (group_id,)
        ) as cursor:
            group = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {group['name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {group['branch_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {group['trainer_name']}\n"
        f"üÜî ID: {group_id}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


@admin_router.callback_query(F.data == "add_child")
async def add_child_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞"""
    await state.set_state(AdminStates.creating_child_name)
    await callback.message.edit_text(
        "üë∂ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:",
        reply_markup=get_back_button()
    )


@admin_router.message(StateFilter(AdminStates.creating_child_name))
async def process_child_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞"""
    child_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT * FROM users WHERE role = 'parent' ORDER BY first_name, last_name",
        ) as cursor:
            parents = await cursor.fetchall()

    if not parents:
        await message.answer(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π!",
            reply_markup=get_main_trainer_menu()
        )
        await state.clear()
        return

    await state.update_data(child_name=child_name)
    await state.set_state(AdminStates.selecting_child_parent)

    keyboard = InlineKeyboardBuilder()
    for parent in parents:
        parent_name = f"{parent['first_name']} {parent['last_name']}"
        if parent['username']:
            parent_name += f" (@{parent['username']})"
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë§ {parent_name}",
                callback_data=f"select_child_parent_{parent['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await message.answer(
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("select_child_parent_"), StateFilter(AdminStates.selecting_child_parent))
async def select_child_parent(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞"""
    parent_id = int(callback.data.split("_")[3])
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id
                   JOIN trainers t ON g.trainer_id = t.id
                   ORDER BY b.name, g.name"""
        ) as cursor:
            groups = await cursor.fetchall()

    if not groups:
        await callback.message.edit_text(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_back_button()
        )
        await state.clear()
        return

    await state.update_data(parent_id=parent_id)
    await state.set_state(AdminStates.selecting_child_group)

    keyboard = InlineKeyboardBuilder()
    for group in groups:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë• {group['name']} ({group['branch_name']} - {group['trainer_name']})",
                callback_data=f"select_child_group_{group['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("select_child_group_"), StateFilter(AdminStates.selecting_child_group))
async def select_child_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞"""
    group_id = int(callback.data.split("_")[3])
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º —Ä–µ–±—ë–Ω–∫–∞
    child_id = await db.create_child(data['child_name'], data['parent_id'], group_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.name as group_name, b.name as branch_name, t.full_name as trainer_name,
                          u.first_name || ' ' || u.last_name as parent_name
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id
                   JOIN trainers t ON g.trainer_id = t.id
                   JOIN users u ON u.id = ?
                   WHERE g.id = ?""", (data['parent_id'], group_id)
        ) as cursor:
            info = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üë∂ –ò–º—è: {data['child_name']}\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {info['parent_name']}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {info['group_name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {info['branch_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {info['trainer_name']}\n"
        f"üÜî ID: {child_id}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


# –û–¢–ß–Å–¢–´

@admin_router.callback_query(F.data == "mt_reports")
async def reports_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìÖ –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today"),
        InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìà –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="report_month"),
        InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç", callback_data="report_finance")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data == "report_today")
async def report_today(callback: CallbackQuery):
    """–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    from datetime import date
    today = date.today()

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        async with conn.execute(
                """SELECT s.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name
                   FROM sessions s 
                   JOIN groups_table g ON s.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON s.trainer_id = t.id 
                   WHERE DATE(s.start_time) = ? 
                   ORDER BY s.start_time""", (today.isoformat(),)
        ) as cursor:
            sessions = await cursor.fetchall()

        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(payment_date) = ?", (today.isoformat(),)
        ) as cursor:
            payments_today = (await cursor.fetchone())[0]

    if not sessions:
        await callback.message.edit_text(
            f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {today.strftime('%d.%m.%Y')}\n\n"
            f"‚ùå –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ.",
            reply_markup=get_back_button()
        )
        return

    text = f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {today.strftime('%d.%m.%Y')}\n\n"
    text += f"üìä –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {len(sessions)}\n"
    text += f"üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {sum(1 for s in sessions if s['type'] == 'training')}\n"
    text += f"‚öΩ –ò–≥—Ä—ã: {sum(1 for s in sessions if s['type'] == 'game')}\n"
    text += f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–Ω–µ–≥: {payments_today:.0f} —Ä—É–±.\n\n"

    text += "üìã –ó–∞–Ω—è—Ç–∏—è:\n"
    for session in sessions:
        start_time = session['start_time']
        if isinstance(start_time, str):
            start_time = datetime.fromisoformat(start_time)
        start_time_str = start_time.strftime('%H:%M')
        session_type = "üèÉ" if session['type'] == 'training' else "‚öΩ"
        text += f"{session_type} {start_time_str} - {session['group_name']} ({session['trainer_name']})\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ admin_handlers.py

@admin_router.callback_query(F.data == "view_children")
async def view_children_with_edit(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–µ—Ç–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name,
                          u.first_name || ' ' || u.last_name as parent_name
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   JOIN users u ON c.parent_id = u.id
                   ORDER BY b.name, g.name, c.full_name"""
        ) as cursor:
            children = await cursor.fetchall()

    if not children:
        await callback.message.edit_text(
            "‚ùå –î–µ—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_back_button()
        )
        return

    keyboard = InlineKeyboardBuilder()
    for child in children:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë∂ {child['full_name']} ({child['group_name']}, {child['branch_name']})",
                callback_data=f"child_info_{child['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="mt_groups"))

    await callback.message.edit_text(
        "üë∂ –í—Å–µ –¥–µ—Ç–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data.startswith("child_info_"))
async def child_info_with_actions(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±—ë–Ω–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    child_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name,
                          u.first_name || ' ' || u.last_name as parent_name, u.username as parent_username
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id 
                   JOIN trainers t ON g.trainer_id = t.id 
                   JOIN users u ON c.parent_id = u.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        from datetime import date, timedelta
        month_ago = date.today() - timedelta(days=30)

        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_sessions,
                       SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) as present_count
                   FROM attendance a
                   JOIN sessions s ON a.session_id = s.id
                   WHERE a.child_id = ? AND DATE(s.start_time) >= ?""", (child_id, month_ago.isoformat())
        ) as cursor:
            stats = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_payments,
                       SUM(amount) as total_amount,
                       SUM(CASE WHEN status = 'in_cashbox' THEN amount ELSE 0 END) as paid_amount
                   FROM payments WHERE child_id = ?""", (child_id,)
        ) as cursor:
            payment_stats = await cursor.fetchone()

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    total_sessions = stats['total_sessions'] or 0
    present_count = stats['present_count'] or 0
    attendance_rate = (present_count / total_sessions * 100) if total_sessions > 0 else 0

    total_payments = payment_stats['total_payments'] or 0
    total_amount = payment_stats['total_amount'] or 0
    paid_amount = payment_stats['paid_amount'] or 0

    parent_info = f"{child['parent_name']}"
    if child['parent_username']:
        parent_info += f" (@{child['parent_username']})"

    text = (
        f"üë∂ {child['full_name']}\n\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_info}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {child['group_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {child['trainer_name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {child['branch_name']}\n\n"
        f"üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü:\n"
        f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"
        f"   –ü–æ—Å–µ—Ç–∏–ª: {present_count}\n"
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {attendance_rate:.1f}%\n\n"
        f"üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n"
        f"   –í—Å–µ–≥–æ: {total_amount:.0f} —Ä—É–±. ({total_payments} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
        f"   –°–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É: {paid_amount:.0f} —Ä—É–±."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_child_{child_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_child_{child_id}")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="view_children"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


# –ù–ê–ô–î–ò–¢–ï –≤ admin_handlers.py —Ñ—É–Ω–∫—Ü–∏—é edit_child_start –∏ –ó–ê–ú–ï–ù–ò–¢–ï –µ—ë –Ω–∞ —ç—Ç—É:

# –ù–ê–ô–î–ò–¢–ï –≤ admin_handlers.py —Ñ—É–Ω–∫—Ü–∏—é edit_child_start –∏ –ó–ê–ú–ï–ù–ò–¢–ï –µ—ë –Ω–∞ —ç—Ç—É:

# –ù–ê–ô–î–ò–¢–ï –≤ admin_handlers.py —Ñ—É–Ω–∫—Ü–∏—é edit_child_start –∏ –ó–ê–ú–ï–ù–ò–¢–ï –µ—ë –Ω–∞ —ç—Ç—É:

@admin_router.callback_query(F.data.startswith("edit_child_") & ~F.data.contains("parent") & ~F.data.contains("group"))
async def edit_child_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.*, g.name as group_name, u.first_name || ' ' || u.last_name as parent_name
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN users u ON c.parent_id = u.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    await state.update_data(
        editing_child_id=child_id,
        current_name=child['full_name'],
        current_parent_id=child['parent_id'],
        current_group_id=child['group_id']
    )
    await state.set_state(AdminStates.editing_child_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data="edit_child_parent_only"))
    keyboard.row(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_child_group_only"))
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"child_info_{child_id}"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {child['full_name']}\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å: {child['parent_name']}\n"
        f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {child['group_name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboard.as_markup()
    )


# –î–û–ë–ê–í–¨–¢–ï —ç—Ç–∏ –¥–≤–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–û–°–õ–ï —Ñ—É–Ω–∫—Ü–∏–∏ edit_child_start:

@admin_router.callback_query(F.data == "edit_child_parent_only", StateFilter(AdminStates.editing_child_name))
async def edit_child_parent_only(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è —Ä–µ–±—ë–Ω–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT * FROM users WHERE role = 'parent' ORDER BY first_name, last_name",
        ) as cursor:
            parents = await cursor.fetchall()

    if not parents:
        await callback.message.edit_text(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π!",
            reply_markup=get_back_button()
        )
        return

    await state.set_state(AdminStates.editing_child_parent)

    keyboard = InlineKeyboardBuilder()
    for parent in parents:
        parent_name = f"{parent['first_name']} {parent['last_name']}"
        if parent['username']:
            parent_name += f" (@{parent['username']})"
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë§ {parent_name}",
                callback_data=f"select_edit_child_parent_{parent['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.callback_query(F.data == "edit_child_group_only", StateFilter(AdminStates.editing_child_name))
async def edit_child_group_only(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Ä–µ–±—ë–Ω–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT g.*, b.name as branch_name, t.full_name as trainer_name
                   FROM groups_table g 
                   JOIN branches b ON g.branch_id = b.id
                   JOIN trainers t ON g.trainer_id = t.id
                   ORDER BY b.name, g.name"""
        ) as cursor:
            groups = await cursor.fetchall()

    if not groups:
        await callback.message.edit_text(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø!",
            reply_markup=get_back_button()
        )
        return

    await state.set_state(AdminStates.editing_child_group)

    keyboard = InlineKeyboardBuilder()
    for group in groups:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë• {group['name']} ({group['branch_name']} - {group['trainer_name']})",
                callback_data=f"select_edit_child_group_{group['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=keyboard.as_markup()
    )


@admin_router.message(StateFilter(AdminStates.editing_child_name))
async def process_edit_child_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞"""
    new_name = message.text.strip()
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
    async with aiosqlite.connect(db.db_path) as conn:
        await conn.execute(
            "UPDATE children SET full_name = ? WHERE id = ?",
            (new_name, data['editing_child_id'])
        )
        await conn.commit()

    await message.answer(
        f"‚úÖ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"üë∂ –ù–æ–≤–æ–µ –∏–º—è: {new_name}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


@admin_router.callback_query(F.data.startswith("delete_child_"))
async def delete_child_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.full_name, g.name as group_name
                   FROM children c
                   JOIN groups_table g ON c.group_id = g.id
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child = await cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        async with conn.execute("SELECT COUNT(*) FROM attendance WHERE child_id = ?", (child_id,)) as cursor:
            attendance_count = (await cursor.fetchone())[0]

        async with conn.execute("SELECT COUNT(*) FROM payments WHERE child_id = ?", (child_id,)) as cursor:
            payments_count = (await cursor.fetchone())[0]

    if not child:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_child_{child_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"child_info_{child_id}")
    )

    warning = ""
    if attendance_count > 0 or payments_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é:\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {attendance_count}\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ–± –æ–ø–ª–∞—Ç–∞—Ö: {payments_count}"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞ '{child['full_name']}'?\n"
        f"–ì—Ä—É–ø–ø–∞: {child['group_name']}{warning}\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard.as_markup()
    )

@admin_router.callback_query(F.data.startswith("confirm_delete_child_"))
async def confirm_delete_child(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT full_name FROM children WHERE id = ?", (child_id,)) as cursor:
            child = await cursor.fetchone()

        if child:
            await conn.execute("DELETE FROM children WHERE id = ?", (child_id,))
            await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ '{child['full_name']}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=get_main_trainer_menu()
    )

# –î–û–ë–ê–í–¨–¢–ï —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ö–û–ù–ï–¶ —Ñ–∞–π–ª–∞ admin_handlers.py:

@admin_router.callback_query(F.data.startswith("select_edit_child_parent_"), StateFilter(AdminStates.editing_child_parent))
async def select_edit_child_parent(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞"""
    parent_id = int(callback.data.split("_")[4])
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è: –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ
    final_name = data.get('new_name', data['current_name'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–±—ë–Ω–∫–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.execute(
            "UPDATE children SET full_name = ?, parent_id = ? WHERE id = ?",
            (final_name, parent_id, data['editing_child_id'])
        )
        await conn.commit()

        async with conn.execute(
                "SELECT first_name || ' ' || last_name as parent_name FROM users WHERE id = ?",
                (parent_id,)
        ) as cursor:
            parent = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üë∂ –ò–º—è: {final_name}\n"
        f"üë§ –ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å: {parent['parent_name']}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()


@admin_router.callback_query(F.data.startswith("select_edit_child_group_"), StateFilter(AdminStates.editing_child_group))
async def select_edit_child_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞"""
    group_id = int(callback.data.split("_")[4])
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è: –Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ
    final_name = data.get('new_name', data['current_name'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–±—ë–Ω–∫–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        await conn.execute(
            "UPDATE children SET full_name = ?, group_id = ? WHERE id = ?",
            (final_name, group_id, data['editing_child_id'])
        )
        await conn.commit()

        async with conn.execute("SELECT name FROM groups_table WHERE id = ?", (group_id,)) as cursor:
            group = await cursor.fetchone()

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üë∂ –ò–º—è: {final_name}\n"
        f"üë• –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {group['name']}",
        reply_markup=get_main_trainer_menu()
    )

    await state.clear()