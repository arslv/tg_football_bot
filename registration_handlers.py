from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite

from config import ROLE_TRAINER, ROLE_PARENT, ROLE_CASHIER
from database import db
from keyboards import get_trainer_menu, get_parent_menu, get_cashier_menu, get_back_button
from states import RegistrationStates

registration_router = Router()


@registration_router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    existing_user = await db.get_user_by_telegram_id(message.from_user.id)

    if existing_user:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="role_trainer"),
        InlineKeyboardButton(text="üë§ –†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")
    )
    keyboard.row(
        InlineKeyboardButton(text="üí∞ –ö–∞—Å—Å–∏—Ä", callback_data="role_cashier")
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=keyboard.as_markup()
    )

    await state.set_state(RegistrationStates.waiting_for_role)


@registration_router.callback_query(F.data.startswith("role_"), StateFilter(RegistrationStates.waiting_for_role))
async def select_role(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role = callback.data.split("_")[1]

    role_names = {
        "trainer": "–¢—Ä–µ–Ω–µ—Ä",
        "parent": "–†–æ–¥–∏—Ç–µ–ª—å",
        "cashier": "–ö–∞—Å—Å–∏—Ä"
    }

    role_system = {
        "trainer": ROLE_TRAINER,
        "parent": ROLE_PARENT,
        "cashier": ROLE_CASHIER
    }

    await state.update_data(role=role_system[role], role_name=role_names[role])
    await state.set_state(RegistrationStates.waiting_for_name)

    await callback.message.edit_text(
        f"üë§ –†–æ–ª—å: {role_names[role]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=get_back_button()
    )


@registration_router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    full_name = message.text.strip()
    data = await state.get_data()

    await state.update_data(full_name=full_name)
    await state.set_state(RegistrationStates.waiting_for_phone)

    await message.answer(
        f"üë§ {data['role_name']}: {full_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )


@registration_router.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name_parts = data['full_name'].split()
    first_name = name_parts[0] if name_parts else data['full_name']
    last_name = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""

    user_id = await db.create_user(
        message.from_user.id,
        message.from_user.username or "",
        first_name,
        last_name,
        data['role']
    )

    # –ï—Å–ª–∏ —Ä–æ–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
    if data['role'] == ROLE_TRAINER:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                    "SELECT t.*, b.name as branch_name FROM trainers t "
                    "JOIN branches b ON t.branch_id = b.id "
                    "WHERE t.full_name = ? AND t.user_id IS NULL",  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                    (data['full_name'],)
            ) as cursor:
                existing_trainer = await cursor.fetchone()

            if existing_trainer:
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
                await conn.execute(
                    "UPDATE trainers SET user_id = ? WHERE id = ?",
                    (user_id, existing_trainer['id'])
                )
                await conn.commit()

                await message.answer(
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –ò–º—è: {data['full_name']}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üë®‚Äçüè´ –†–æ–ª—å: –¢—Ä–µ–Ω–µ—Ä\n"
                    f"üè¢ –§–∏–ª–∏–∞–ª: {existing_trainer['branch_name']}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏!",
                    reply_markup=get_trainer_menu()
                )
            else:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                await conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
                await conn.commit()

                await message.answer(
                    f"‚ö†Ô∏è –¢—Ä–µ–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º '{data['full_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    f"‚ùó –í–∞–∂–Ω–æ: –∏–º—è –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è:\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä–∞\n"
                    f"‚Ä¢ –£—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏\n\n"
                    f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
                )

    elif data['role'] == ROLE_PARENT:
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {data['full_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë§ –†–æ–ª—å: –†–æ–¥–∏—Ç–µ–ª—å\n\n"
            f"–¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_parent_menu()
        )

    elif data['role'] == ROLE_CASHIER:
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {data['full_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí∞ –†–æ–ª—å: –ö–∞—Å—Å–∏—Ä\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤.",
            reply_markup=get_cashier_menu()
        )

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await db.add_log(user_id, "user_registered", f"Role: {data['role']}, Name: {data['full_name']}")

    await state.clear()


@registration_router.callback_query(F.data == "back_to_registration", StateFilter(RegistrationStates))
async def back_to_registration(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
    await state.set_state(RegistrationStates.waiting_for_role)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="role_trainer"),
        InlineKeyboardButton(text="üë§ –†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")
    )
    keyboard.row(
        InlineKeyboardButton(text="üí∞ –ö–∞—Å—Å–∏—Ä", callback_data="role_cashier")
    )

    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=keyboard.as_markup()
    )