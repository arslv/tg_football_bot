from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, Location
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from datetime import datetime
import re
import aiosqlite

from config import ROLE_MAIN_TRAINER, ROLE_TRAINER, ROLE_PARENT, ROLE_CASHIER, ADMIN_USER_IDS
from database import db
from keyboards import *
from states import *
from notifications import NotificationService

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main.py)
notification_service = None


def set_notification_service(service: NotificationService):
    global notification_service
    notification_service = service


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await state.clear()

    user = await db.get_user_by_telegram_id(message.from_user.id)

    if not user:
        if message.from_user.id in ADMIN_USER_IDS:
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            user_id = await db.create_user(
                message.from_user.id,
                message.from_user.username or "",
                message.from_user.first_name or "",
                message.from_user.last_name or "",
                ROLE_MAIN_TRAINER
            )
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä!\n"
                f"–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.",
                reply_markup=get_main_trainer_menu()
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏!\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
            )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if user['role'] == ROLE_MAIN_TRAINER:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!\n"
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:",
            reply_markup=get_main_trainer_menu()
        )
    elif user['role'] == ROLE_TRAINER:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!\n"
            f"–ú–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:",
            reply_markup=get_trainer_menu()
        )
    elif user['role'] == ROLE_PARENT:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!\n"
            f"–ú–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_parent_menu()
        )
    elif user['role'] == ROLE_CASHIER:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!\n"
            f"–ú–µ–Ω—é –∫–∞—Å—Å–∏—Ä–∞:",
            reply_markup=get_cashier_menu()
        )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if user['role'] == ROLE_MAIN_TRAINER:
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_trainer_menu()
        )
    elif user['role'] == ROLE_TRAINER:
        await callback.message.edit_text(
            "–ú–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞:",
            reply_markup=get_trainer_menu()
        )
    elif user['role'] == ROLE_PARENT:
        await callback.message.edit_text(
            "–ú–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_parent_menu()
        )
    elif user['role'] == ROLE_CASHIER:
        await callback.message.edit_text(
            "–ú–µ–Ω—é –∫–∞—Å—Å–∏—Ä–∞:",
            reply_markup=get_cashier_menu()
        )


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –¢–†–ï–ù–ï–†–ê

@router.callback_query(F.data.in_(["start_training", "start_game"]))
async def start_session_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –∏–≥—Ä—ã"""
    session_type = "training" if callback.data == "start_training" else "game"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–µ–Ω–µ—Ä–∞
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    active_session = await db.get_active_session(trainer['id'])
    if active_session:
        await callback.message.edit_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.",
            reply_markup=get_back_button()
        )
        return

    await state.update_data(session_type=session_type, trainer_id=trainer['id'])
    await state.set_state(SessionStates.waiting_for_location)

    session_name = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" if session_type == "training" else "–∏–≥—Ä—É"

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        f"–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ {session_name}.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–µ–ø–∫—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'",
        reply_markup=keyboard.as_markup()
    )


@router.message(F.location, StateFilter(SessionStates.waiting_for_location))
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    location = message.location

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Ç—Ä–µ–Ω–µ—Ä–∞
    trainer_id = data['trainer_id']
    groups = await db.get_groups_by_trainer(trainer_id)

    if not groups:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_trainer_menu()
        )
        await state.clear()
        return

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–¥–Ω–∞, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    if len(groups) == 1:
        group = groups[0]
        session_id = await db.create_session(
            data['session_type'], trainer_id, group['id'],
            location.latitude, location.longitude
        )

        session_name = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if data['session_type'] == "training" else "–ò–≥—Ä–∞"
        await message.answer(
            f"‚úÖ {session_name} –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"–ì—Ä—É–ø–ø–∞: {group['name']}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–∫–ª–∏—á–∫—É.",
            reply_markup=get_trainer_menu()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_service:
            await notification_service.notify_session_started(session_id, data['session_type'])

        await state.clear()
    else:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–∞—ë–º –≤—ã–±—Ä–∞—Ç—å
        keyboard = InlineKeyboardBuilder()
        for group in groups:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë• {group['name']}",
                    callback_data=f"select_group_{group['id']}"
                )
            )
        keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_menu"))

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=keyboard.as_markup()
        )
        await state.update_data(location_lat=location.latitude, location_lon=location.longitude)


@router.callback_query(F.data.startswith("select_group_"), StateFilter(SessionStates.waiting_for_location))
async def select_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
    group_id = int(callback.data.split("_")[2])
    data = await state.get_data()

    session_id = await db.create_session(
        data['session_type'], data['trainer_id'], group_id,
        data['location_lat'], data['location_lon']
    )

    group = await db.get_group_by_id(group_id)
    session_name = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if data['session_type'] == "training" else "–ò–≥—Ä–∞"

    await callback.message.edit_text(
        f"‚úÖ {session_name} –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"–ì—Ä—É–ø–ø–∞: {group['name']}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–∫–ª–∏—á–∫—É.",
        reply_markup=get_trainer_menu()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_service:
        await notification_service.notify_session_started(session_id, data['session_type'])

    await state.clear()


@router.callback_query(F.data == "attendance")
async def attendance_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª–∏—á–∫–∞"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    active_session = await db.get_active_session(trainer['id'])
    if not active_session:
        await callback.message.edit_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∏—á–∫–∏.",
            reply_markup=get_back_button()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π –≥—Ä—É–ø–ø—ã
    children = await db.get_children_by_group(active_session['group_id'])

    if not children:
        await callback.message.edit_text(
            "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    await callback.message.edit_text(
        f"üë• –ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ –≥—Ä—É–ø–ø—ã\n"
        f"–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:",
        reply_markup=get_attendance_keyboard(children, active_session['id'])
    )


@router.callback_query(F.data.startswith("present_") | F.data.startswith("absent_"))
async def mark_attendance_handler(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    parts = callback.data.split("_")
    status = parts[0]  # present –∏–ª–∏ absent
    session_id = int(parts[1])
    child_id = int(parts[2])

    # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
    await db.mark_attendance(session_id, child_id, status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
    if notification_service:
        await notification_service.notify_attendance(child_id, status, session_id)

    await callback.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {'–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if status == 'present' else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")


@router.callback_query(F.data == "finish_attendance")
async def finish_attendance(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª–∏—á–∫–∏"""
    await callback.message.edit_text(
        "‚úÖ –ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=get_back_button()
    )


@router.callback_query(F.data == "end_session")
async def end_session_handler(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    active_session = await db.get_active_session(trainer['id'])
    if not active_session:
        await callback.message.edit_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=get_back_button()
        )
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    await db.end_session(active_session['id'])

    session_name = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if active_session['type'] == "training" else "–ò–≥—Ä–∞"
    await callback.message.edit_text(
        f"‚úÖ {session_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}",
        reply_markup=get_back_button()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_service:
        await notification_service.notify_session_ended(active_session['id'])


@router.callback_query(F.data == "trainer_stats")
async def trainer_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    from datetime import date, timedelta
    today = date.today()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π —Ç—Ä–µ–Ω–µ—Ä–∞
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE trainer_id = ? AND DATE(start_time) = ?",
                (trainer['id'], today.isoformat())
        ) as cursor:
            today_sessions = (await cursor.fetchone())[0]

        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE trainer_id = ? AND DATE(start_time) >= ?",
                (trainer['id'], week_ago.isoformat())
        ) as cursor:
            week_sessions = (await cursor.fetchone())[0]

        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE trainer_id = ? AND DATE(start_time) >= ?",
                (trainer['id'], month_ago.isoformat())
        ) as cursor:
            month_sessions = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–ª–∞—Ç—ã —É —Ç—Ä–µ–Ω–µ—Ä–∞
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE trainer_id = ? AND status = 'with_trainer'",
                (trainer['id'],)
        ) as cursor:
            money_with_trainer = (await cursor.fetchone())[0]

        # –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE trainer_id = ? AND payment_date >= ?",
                (trainer['id'], month_ago.isoformat())
        ) as cursor:
            month_income = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö —Ç—Ä–µ–Ω–µ—Ä–∞
        async with conn.execute(
                """SELECT COUNT(DISTINCT c.id) 
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   WHERE g.trainer_id = ?""",
                (trainer['id'],)
        ) as cursor:
            total_children = (await cursor.fetchone())[0]

        # –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                """SELECT ROUND(AVG(CASE WHEN a.status = 'present' THEN 100.0 ELSE 0.0 END), 1)
                   FROM attendance a 
                   JOIN sessions s ON a.session_id = s.id 
                   WHERE s.trainer_id = ? AND DATE(s.start_time) >= ?""",
                (trainer['id'], month_ago.isoformat())
        ) as cursor:
            result = await cursor.fetchone()
            avg_attendance = result[0] if result[0] is not None else 0

    text = (
        f"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: {today_sessions}\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é: {week_sessions}\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü: {month_sessions}\n\n"
        f"üë∂ –í—Å–µ–≥–æ –¥–µ—Ç–µ–π: {total_children}\n"
        f"üìà –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {avg_attendance}%\n\n"
        f"üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
        f"   –£ –º–µ–Ω—è: {money_with_trainer:.0f} —Ä—É–±.\n"
        f"   –°–æ–±—Ä–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {month_income:.0f} —Ä—É–±."
    )

    await callback.message.edit_text(text, reply_markup=get_back_button())


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –¢–†–ï–ù–ï–†–ê (–æ—Å–Ω–æ–≤–Ω—ã–µ)

@router.callback_query(F.data == "mt_statistics")
async def main_trainer_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    from datetime import date, timedelta

    today = date.today()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE DATE(start_time) = ?", (today.isoformat(),)
        ) as cursor:
            today_sessions = (await cursor.fetchone())[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE DATE(start_time) >= ?", (week_ago.isoformat(),)
        ) as cursor:
            week_sessions = (await cursor.fetchone())[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COUNT(*) FROM sessions WHERE DATE(start_time) >= ?", (month_ago.isoformat(),)
        ) as cursor:
            month_sessions = (await cursor.fetchone())[0]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã
        async with conn.execute(
                "SELECT COUNT(*) FROM trainers t JOIN users u ON t.user_id = u.id WHERE u.is_active = TRUE"
        ) as cursor:
            active_trainers = (await cursor.fetchone())[0]

        # –í—Å–µ–≥–æ –¥–µ—Ç–µ–π
        async with conn.execute("SELECT COUNT(*) FROM children") as cursor:
            total_children = (await cursor.fetchone())[0]

        # –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                """SELECT ROUND(AVG(CASE WHEN a.status = 'present' THEN 100.0 ELSE 0.0 END), 1)
                   FROM attendance a 
                   JOIN sessions s ON a.session_id = s.id 
                   WHERE DATE(s.start_time) >= ?""", (month_ago.isoformat(),)
        ) as cursor:
            result = await cursor.fetchone()
            avg_attendance = result[0] if result[0] is not None else 0

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏\n\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: {today_sessions}\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é: {week_sessions}\n"
        f"üìÖ –ó–∞–Ω—è—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü: {month_sessions}\n\n"
        f"üë®‚Äçüè´ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã: {active_trainers}\n"
        f"üë∂ –í—Å–µ–≥–æ –¥–µ—Ç–µ–π: {total_children}\n"
        f"üìà –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {avg_attendance}%"
    )

    await callback.message.edit_text(text, reply_markup=get_back_button())


@router.callback_query(F.data == "mt_finance")
async def main_trainer_finance(callback: CallbackQuery):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    from datetime import date, timedelta

    today = date.today()
    month_ago = today - timedelta(days=30)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row

        # –î–µ–Ω—å–≥–∏ —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'with_trainer'"
        ) as cursor:
            money_with_trainers = (await cursor.fetchone())[0]

        # –î–µ–Ω—å–≥–∏ –≤ –∫–∞—Å—Å–µ
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'in_cashbox'"
        ) as cursor:
            money_in_cashbox = (await cursor.fetchone())[0]

        # –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE payment_date >= ?", (month_ago.isoformat(),)
        ) as cursor:
            month_income = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü
        async with conn.execute(
                "SELECT COUNT(*) FROM payments WHERE payment_date >= ?", (month_ago.isoformat(),)
        ) as cursor:
            month_payments_count = (await cursor.fetchone())[0]

    text = (
        f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞\n\n"
        f"üíµ –£ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: {money_with_trainers:.0f} —Ä—É–±.\n"
        f"üè¶ –í –∫–∞—Å—Å–µ: {money_in_cashbox:.0f} —Ä—É–±.\n"
        f"üíé –û–±—â–∞—è —Å—É–º–º–∞: {money_with_trainers + money_in_cashbox:.0f} —Ä—É–±.\n\n"
        f"üìÖ –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {month_income:.0f} —Ä—É–±.\n"
        f"üìã –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü: {month_payments_count}"
    )

    await callback.message.edit_text(text, reply_markup=get_back_button())


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–û–î–ò–¢–ï–õ–Ø

@router.callback_query(F.data == "my_children")
async def my_children_handler(callback: CallbackQuery):
    """–ú–æ–∏ –¥–µ—Ç–∏"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    children = await db.get_children_by_parent(user['id'])

    if not children:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    text = "üë∂ –í–∞—à–∏ –¥–µ—Ç–∏:\n\n"
    for child in children:
        text += f"‚Ä¢ {child['full_name']}\n"
        text += f"  üìç –ì—Ä—É–ø–ø–∞: {child['group_name']}\n"
        text += f"  üè¢ –§–∏–ª–∏–∞–ª: {child['branch_name']}\n\n"

    await callback.message.edit_text(text, reply_markup=get_back_button())