from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite
from datetime import date

from config import ROLE_TRAINER
from database import db
from keyboards import get_back_button, get_trainer_menu, get_amount_keyboard, get_month_keyboard
from states import PaymentStates

payment_router = Router()


@payment_router.callback_query(F.data == "payment")
async def payment_handler(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Ç—Ä–µ–Ω–µ—Ä–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å –∏–º–µ–Ω–∞–º–∏ –≥—Ä—É–ø–ø
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.id, c.full_name, c.parent_id, c.group_id, c.created_at,
                          u.telegram_id as parent_telegram_id, u.first_name as parent_name,
                          g.name as group_name
                   FROM children c 
                   JOIN users u ON c.parent_id = u.id 
                   JOIN groups_table g ON c.group_id = g.id
                   WHERE g.trainer_id = ?
                   ORDER BY g.name, c.full_name""", (trainer['id'],)
        ) as cursor:
            all_children = await cursor.fetchall()

    if not all_children:
        await callback.message.edit_text(
            "–í –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Ç –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    keyboard = InlineKeyboardBuilder()
    for child in all_children:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë∂ {child['full_name']} ({child['group_name']})",
                callback_data=f"payment_child_{child['id']}"
            )
        )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard.as_markup()
    )


@payment_router.callback_query(F.data.startswith("payment_child_"))
async def select_child_for_payment(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    child_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—ë–Ω–∫–µ
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.full_name, g.name as group_name 
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   WHERE c.id = ?""", (child_id,)
        ) as cursor:
            child_info = await cursor.fetchone()

    if not child_info:
        await callback.message.edit_text("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    await state.update_data(child_id=child_id, child_name=child_info['full_name'], group_name=child_info['group_name'])
    await state.set_state(PaymentStates.waiting_for_amount)

    await callback.message.edit_text(
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_info['full_name']}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {child_info['group_name']}\n\n"
        f"üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_amount_keyboard()
    )


@payment_router.callback_query(F.data.startswith("amount_"), StateFilter(PaymentStates.waiting_for_amount))
async def select_amount(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
    amount = int(callback.data.split("_")[1])
    data = await state.get_data()

    await state.update_data(amount=amount)
    await state.set_state(PaymentStates.waiting_for_month)

    await callback.message.edit_text(
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Å—É–º\n\n"
        f"üìÖ –ó–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü –æ–ø–ª–∞—Ç–∞?",
        reply_markup=get_month_keyboard()
    )


@payment_router.callback_query(F.data == "custom_amount", StateFilter(PaymentStates.waiting_for_amount))
async def custom_amount_handler(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    await state.set_state(PaymentStates.waiting_for_custom_amount)

    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=get_back_button()
    )


@payment_router.message(StateFilter(PaymentStates.waiting_for_custom_amount))
async def process_custom_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    await state.update_data(amount=amount)
    await state.set_state(PaymentStates.waiting_for_month)

    await message.answer(
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n"
        f"üí∞ –°—É–º–º–∞: {amount:.0f} —Å—É–º\n\n"
        f"üìÖ –ó–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü –æ–ø–ª–∞—Ç–∞?",
        reply_markup=get_month_keyboard()
    )


@payment_router.callback_query(F.data.startswith("month_"), StateFilter(PaymentStates.waiting_for_month))
async def select_month(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –æ–ø–ª–∞—Ç—ã"""
    month_year = callback.data.split("_")[1]  # –§–æ—Ä–º–∞—Ç: 2025-01
    data = await state.get_data()

    await state.update_data(month_year=month_year)
    await state.set_state(PaymentStates.confirming_payment)

    # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    year, month = month_year.split('-')
    months_ru = {
        '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
    }
    month_name = months_ru.get(month, month)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
    )

    await callback.message.edit_text(
        f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n"
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {data['group_name']}\n"
        f"üíµ –°—É–º–º–∞: {data['amount']:.0f} —Å—É–º\n"
        f"üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {month_name} {year}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard.as_markup()
    )


@payment_router.callback_query(F.data == "confirm_payment", StateFilter(PaymentStates.confirming_payment))
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    trainer = await db.get_trainer_by_user_id(user['id'])

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
    payment_id = await db.create_payment(
        data['child_id'],
        trainer['id'],
        data['amount'],
        data['month_year']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        from handlers_complete_fixed import notification_service
        if notification_service:
            await notification_service.notify_payment_received(
                data['child_id'],
                data['amount'],
                data['month_year']
            )
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pass

    # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    year, month = data['month_year'].split('-')
    months_ru = {
        '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
    }
    month_name = months_ru.get(month, month)

    await callback.message.edit_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:.0f} —Å—É–º\n"
        f"üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {month_name} {year}\n"
        f"üïê –í—Ä–µ–º—è: {date.today().strftime('%d.%m.%Y')}\n\n"
        f"–†–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.",
        reply_markup=get_trainer_menu()
    )

    await state.clear()


@payment_router.callback_query(F.data == "to_cashbox")
async def to_cashbox_handler(callback: CallbackQuery):
    """–°–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∫–∞—Å—Å—É"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    trainer = await db.get_trainer_by_user_id(user['id'])
    if not trainer:
        await callback.message.edit_text("–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É —Ç—Ä–µ–Ω–µ—Ä–∞
    payments = await db.get_payments_with_trainer(trainer['id'])

    if not payments:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∫–∞—Å—Å—É.",
            reply_markup=get_back_button()
        )
        return

    total_amount = sum(payment['amount'] for payment in payments)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å –≤ –∫–∞—Å—Å—É", callback_data="confirm_cashbox"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
    )

    text = f"üíµ –°–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å—É\n\n"
    text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.0f} —Å—É–º\n"
    text += f"üìã –ü–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n\n"
    text += f"–î–µ—Ç–∞–ª–∏:\n"

    for payment in payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        text += f"‚Ä¢ {payment['child_name']}: {payment['amount']:.0f} —Å—É–º\n"

    if len(payments) > 5:
        text += f"‚Ä¢ ... –∏ –µ—â—ë {len(payments) - 5}\n"

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@payment_router.callback_query(F.data == "confirm_cashbox")
async def confirm_cashbox(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–∞—á–∏ –≤ –∫–∞—Å—Å—É"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    trainer = await db.get_trainer_by_user_id(user['id'])

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    payments = await db.get_payments_with_trainer(trainer['id'])
    total_amount = sum(payment['amount'] for payment in payments)

    if total_amount == 0:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Å–¥–∞—á–∏.",
            reply_markup=get_back_button()
        )
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –∫–∞—Å—Å—É
    await db.move_payments_to_cashbox(trainer['id'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        from handlers_complete_fixed import notification_service
        if notification_service:
            await notification_service.notify_money_to_cashbox(trainer['id'], total_amount)
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pass

    await callback.message.edit_text(
        f"‚úÖ –î–µ–Ω—å–≥–∏ —Å–¥–∞–Ω—ã –≤ –∫–∞—Å—Å—É!\n\n"
        f"üí∞ –°—É–º–º–∞: {total_amount:.0f} —Å—É–º\n"
        f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=get_trainer_menu()
    )