import asyncio
import aiosqlite
from datetime import datetime
from aiogram import Bot
from database import db


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def notify_session_started(self, session_id: int, session_type: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–∏–≥—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute(
                        """SELECT s.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name
                           FROM sessions s 
                           JOIN groups_table g ON s.group_id = g.id 
                           JOIN branches b ON g.branch_id = b.id 
                           JOIN trainers t ON s.trainer_id = t.id 
                           WHERE s.id = ?""", (session_id,)
                ) as cursor:
                    session_info = await cursor.fetchone()

                if not session_info:
                    return

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π –≥—Ä—É–ø–ø—ã –∏ –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                async with conn.execute(
                        """SELECT c.*, u.telegram_id as parent_telegram_id 
                           FROM children c 
                           JOIN users u ON c.parent_id = u.id 
                           WHERE c.group_id = ?""", (session_info['group_id'],)
                ) as cursor:
                    children = await cursor.fetchall()

                # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                async with conn.execute(
                        "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
                ) as cursor:
                    main_trainers = await cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            session_text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_type == "training" else "–ò–≥—Ä–∞"
            start_time = session_info['start_time']
            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time)

            message = (
                f"üèÉ {session_text} –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
                f"üìç –ì—Ä—É–ø–ø–∞: {session_info['group_name']}\n"
                f"üè¢ –§–∏–ª–∏–∞–ª: {session_info['branch_name']}\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {session_info['trainer_name']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {start_time.strftime('%H:%M')}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º
            for child in children:
                try:
                    child_message = f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child['full_name']}\n\n{message}"
                    await self.bot.send_message(child['parent_telegram_id'], child_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—é {child['parent_telegram_id']}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
            for trainer in main_trainers:
                try:
                    await self.bot.send_message(trainer['telegram_id'], message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É {trainer['telegram_id']}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notify_session_started: {e}")

    async def notify_session_ended(self, session_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–∏–≥—Ä—ã"""
        try:
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute(
                        """SELECT s.*, g.name as group_name, b.name as branch_name, t.full_name as trainer_name
                           FROM sessions s 
                           JOIN groups_table g ON s.group_id = g.id 
                           JOIN branches b ON g.branch_id = b.id 
                           JOIN trainers t ON s.trainer_id = t.id 
                           WHERE s.id = ?""", (session_id,)
                ) as cursor:
                    session_info = await cursor.fetchone()

                async with conn.execute(
                        """SELECT c.*, u.telegram_id as parent_telegram_id 
                           FROM children c 
                           JOIN users u ON c.parent_id = u.id 
                           WHERE c.group_id = ?""", (session_info['group_id'],)
                ) as cursor:
                    children = await cursor.fetchall()

                async with conn.execute(
                        "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
                ) as cursor:
                    main_trainers = await cursor.fetchall()

            session_text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_info['type'] == "training" else "–ò–≥—Ä–∞"
            start_time = session_info['start_time']
            end_time = session_info['end_time']

            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time)
            if isinstance(end_time, str):
                end_time = datetime.fromisoformat(end_time)

            message = (
                f"‚úÖ {session_text} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìç –ì—Ä—É–ø–ø–∞: {session_info['group_name']}\n"
                f"üè¢ –§–∏–ª–∏–∞–ª: {session_info['branch_name']}\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {session_info['trainer_name']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M') if end_time else '–ù/–î'}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º
            for child in children:
                try:
                    child_message = f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child['full_name']}\n\n{message}"
                    await self.bot.send_message(child['parent_telegram_id'], child_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—é: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
            for trainer in main_trainers:
                try:
                    await self.bot.send_message(trainer['telegram_id'], message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notify_session_ended: {e}")

    async def notify_attendance(self, child_id: int, status: str, session_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        try:
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute(
                        """SELECT c.*, u.telegram_id as parent_telegram_id, s.type as session_type
                           FROM children c 
                           JOIN users u ON c.parent_id = u.id 
                           JOIN sessions s ON s.id = ?
                           WHERE c.id = ?""", (session_id, child_id)
                ) as cursor:
                    child_info = await cursor.fetchone()

                if not child_info:
                    return

                session_text = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ" if child_info['session_type'] == "training" else "–∏–≥—Ä–µ"
                status_text = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if status == "present" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                emoji = "‚úÖ" if status == "present" else "‚ùå"

                message = f"{emoji} –í–∞—à —Ä–µ–±—ë–Ω–æ–∫ {child_info['full_name']} {status_text} –Ω–∞ {session_text}"

                await self.bot.send_message(child_info['parent_telegram_id'], message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notify_attendance: {e}")

    async def notify_payment_received(self, child_id: int, amount: float, month_year: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"""
        try:
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute(
                        """SELECT c.*, u.telegram_id as parent_telegram_id 
                           FROM children c 
                           JOIN users u ON c.parent_id = u.id 
                           WHERE c.id = ?""", (child_id,)
                ) as cursor:
                    child_info = await cursor.fetchone()

                async with conn.execute(
                        "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
                ) as cursor:
                    main_trainers = await cursor.fetchall()

                if not child_info:
                    return

                # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü-–≥–æ–¥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                year, month = month_year.split('-')
                months_ru = {
                    '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç',
                    '04': '–ê–ø—Ä–µ–ª—å', '05': '–ú–∞–π', '06': '–ò—é–Ω—å',
                    '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç', '09': '–°–µ–Ω—Ç—è–±—Ä—å',
                    '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
                }
                month_name = months_ru.get(month, month)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
                parent_message = (
                    f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                    f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_info['full_name']}\n"
                    f"üíµ –°—É–º–º–∞: {amount:.0f} —Ä—É–±.\n"
                    f"üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {month_name} {year}"
                )

                await self.bot.send_message(child_info['parent_telegram_id'], parent_message)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
                trainer_message = (
                    f"üí∞ –¢—Ä–µ–Ω–µ—Ä –ø—Ä–∏–Ω—è–ª –æ–ø–ª–∞—Ç—É\n\n"
                    f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_info['full_name']}\n"
                    f"üíµ –°—É–º–º–∞: {amount:.0f} —Ä—É–±.\n"
                    f"üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {month_name} {year}"
                )

                for trainer in main_trainers:
                    try:
                        await self.bot.send_message(trainer['telegram_id'], trainer_message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notify_payment_received: {e}")

    async def notify_money_to_cashbox(self, trainer_id: int, total_amount: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–∞—á–µ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å—É"""
        try:
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                async with conn.execute(
                        "SELECT full_name FROM trainers WHERE id = ?", (trainer_id,)
                ) as cursor:
                    trainer_info = await cursor.fetchone()

                async with conn.execute(
                        "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
                ) as cursor:
                    main_trainers = await cursor.fetchall()

                if not trainer_info:
                    return

                message = (
                    f"üíµ –î–µ–Ω—å–≥–∏ —Å–¥–∞–Ω—ã –≤ –∫–∞—Å—Å—É\n\n"
                    f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_info['full_name']}\n"
                    f"üí∞ –°—É–º–º–∞: {total_amount:.0f} —Ä—É–±."
                )

                for trainer in main_trainers:
                    try:
                        await self.bot.send_message(trainer['telegram_id'], message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notify_money_to_cashbox: {e}")