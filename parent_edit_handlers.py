from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import aiosqlite

from config import ROLE_PARENT
from database import db
from keyboards import get_back_button, get_parent_menu
from states import ParentStates

parent_edit_router = Router()


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –î–ï–¢–ï–ô –†–û–î–ò–¢–ï–õ–Ø–ú–ò

@parent_edit_router.callback_query(F.data == "my_children")
async def my_children_with_edit(callback: CallbackQuery):
    """–ú–æ–∏ –¥–µ—Ç–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    children = await db.get_children_by_parent(user['id'])

    if not children:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=get_back_button()
        )
        return

    keyboard = InlineKeyboardBuilder()
    for child in children:
        keyboard.row(
            InlineKeyboardButton(
                text=f"üë∂ {child['full_name']} - {child['group_name']}",
                callback_data=f"my_child_info_{child['id']}"
            )
        )
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞", callback_data="add_child_request"),
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await callback.message.edit_text(
        "üë∂ –í–∞—à–∏ –¥–µ—Ç–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):",
        reply_markup=keyboard.as_markup()
    )


@parent_edit_router.callback_query(F.data.startswith("my_child_info_"))
async def my_child_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º —Ä–µ–±—ë–Ω–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    child_id = int(callback.data.split("_")[3])
    user = await db.get_user_by_telegram_id(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–±—ë–Ω–æ–∫ —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.full_name, g.name as group_name, b.name as branch_name,
                          t.full_name as trainer_name, c.created_at
                   FROM children c 
                   JOIN groups_table g ON c.group_id = g.id 
                   JOIN branches b ON g.branch_id = b.id
                   JOIN trainers t ON g.trainer_id = t.id
                   WHERE c.id = ? AND c.parent_id = ?""", (child_id, user['id'])
        ) as cursor:
            child = await cursor.fetchone()

        if not child:
            await callback.message.edit_text(
                "–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                reply_markup=get_back_button()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        from datetime import date, timedelta
        month_ago = date.today() - timedelta(days=30)

        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_sessions,
                       SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) as present_count
                   FROM attendance a
                   JOIN sessions s ON a.session_id = s.id
                   WHERE a.child_id = ? AND DATE(s.start_time) >= ?""", (child_id, month_ago.isoformat())
        ) as cursor:
            stats = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        async with conn.execute(
                """SELECT 
                       COUNT(*) as total_payments,
                       SUM(amount) as total_amount,
                       SUM(CASE WHEN status = 'in_cashbox' THEN amount ELSE 0 END) as paid_amount
                   FROM payments WHERE child_id = ?""", (child_id,)
        ) as cursor:
            payment_stats = await cursor.fetchone()

    total_sessions = stats['total_sessions'] or 0
    present_count = stats['present_count'] or 0
    attendance_rate = (present_count / total_sessions * 100) if total_sessions > 0 else 0

    total_payments = payment_stats['total_payments'] or 0
    total_amount = payment_stats['total_amount'] or 0
    paid_amount = payment_stats['paid_amount'] or 0

    text = (
        f"üë∂ {child['full_name']}\n\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {child['group_name']}\n"
        f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {child['trainer_name']}\n"
        f"üè¢ –§–∏–ª–∏–∞–ª: {child['branch_name']}\n\n"
        f"üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü:\n"
        f"   –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_sessions}\n"
        f"   –ü–æ—Å–µ—Ç–∏–ª: {present_count}\n"
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {attendance_rate:.1f}%\n\n"
        f"üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n"
        f"   –í—Å–µ–≥–æ: {total_amount:.0f} —Ä—É–±. ({total_payments} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
        f"   –°–¥–∞–Ω–æ –≤ –∫–∞—Å—Å—É: {paid_amount:.0f} —Ä—É–±."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_my_child_name_{child_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_my_child_{child_id}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π", callback_data=f"child_attendance_{child_id}"),
        InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", callback_data=f"child_payments_{child_id}")
    )
    keyboard.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="my_children"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@parent_edit_router.callback_query(F.data.startswith("edit_my_child_name_"))
async def edit_my_child_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[4])
    user = await db.get_user_by_telegram_id(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT full_name FROM children WHERE id = ? AND parent_id = ?",
                (child_id, user['id'])
        ) as cursor:
            child = await cursor.fetchone()

    if not child:
        await callback.message.edit_text(
            "–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
            reply_markup=get_back_button()
        )
        return

    await state.update_data(editing_my_child_id=child_id, current_child_name=child['full_name'])
    await state.set_state(ParentStates.editing_child_name)

    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {child['full_name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:",
        reply_markup=get_back_button()
    )


@parent_edit_router.message(StateFilter(ParentStates.editing_child_name))
async def process_edit_my_child_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞"""
    new_name = message.text.strip()
    data = await state.get_data()
    user = await db.get_user_by_telegram_id(message.from_user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
    async with aiosqlite.connect(db.db_path) as conn:
        await conn.execute(
            "UPDATE children SET full_name = ? WHERE id = ? AND parent_id = ?",
            (new_name, data['editing_my_child_id'], user['id'])
        )
        await conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    from handlers import notification_service
    if notification_service:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                    "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
            ) as cursor:
                main_trainers = await cursor.fetchall()

        for trainer in main_trainers:
            try:
                await notification_service.bot.send_message(
                    trainer['telegram_id'],
                    f"üìù –†–æ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –∏–º—è —Ä–µ–±—ë–Ω–∫–∞\n\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {user['first_name']} {user['last_name']}\n"
                    f"üë∂ –°—Ç–∞—Ä–æ–µ –∏–º—è: {data['current_child_name']}\n"
                    f"üë∂ –ù–æ–≤–æ–µ –∏–º—è: {new_name}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

    await message.answer(
        f"‚úÖ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"üë∂ –°—Ç–∞—Ä–æ–µ –∏–º—è: {data['current_child_name']}\n"
        f"üë∂ –ù–æ–≤–æ–µ –∏–º—è: {new_name}\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏.",
        reply_markup=get_parent_menu()
    )

    await state.clear()


@parent_edit_router.callback_query(F.data.startswith("delete_my_child_"))
async def delete_my_child_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[3])
    user = await db.get_user_by_telegram_id(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                """SELECT c.full_name, g.name as group_name
                   FROM children c
                   JOIN groups_table g ON c.group_id = g.id
                   WHERE c.id = ? AND c.parent_id = ?""", (child_id, user['id'])
        ) as cursor:
            child = await cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        async with conn.execute("SELECT COUNT(*) FROM attendance WHERE child_id = ?", (child_id,)) as cursor:
            attendance_count = (await cursor.fetchone())[0]

        async with conn.execute("SELECT COUNT(*) FROM payments WHERE child_id = ?", (child_id,)) as cursor:
            payments_count = (await cursor.fetchone())[0]

    if not child:
        await callback.message.edit_text(
            "–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
            reply_markup=get_back_button()
        )
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_my_child_{child_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"my_child_info_{child_id}")
    )

    warning = ""
    if attendance_count > 0 or payments_count > 0:
        warning = f"\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é:\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {attendance_count}\n‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ–± –æ–ø–ª–∞—Ç–∞—Ö: {payments_count}"

    await callback.message.edit_text(
        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞ '{child['full_name']}'?\n"
        f"–ì—Ä—É–ø–ø–∞: {child['group_name']}{warning}\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard.as_markup()
    )


@parent_edit_router.callback_query(F.data.startswith("confirm_delete_my_child_"))
async def confirm_delete_my_child(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"""
    child_id = int(callback.data.split("_")[4])
    user = await db.get_user_by_telegram_id(callback.from_user.id)

    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute(
                "SELECT full_name FROM children WHERE id = ? AND parent_id = ?",
                (child_id, user['id'])
        ) as cursor:
            child = await cursor.fetchone()

        if child:
            await conn.execute("DELETE FROM children WHERE id = ? AND parent_id = ?", (child_id, user['id']))
            await conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    from handlers import notification_service
    if notification_service:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                    "SELECT telegram_id FROM users WHERE role = 'main_trainer' AND is_active = TRUE"
            ) as cursor:
                main_trainers = await cursor.fetchall()

        for trainer in main_trainers:
            try:
                await notification_service.bot.send_message(
                    trainer['telegram_id'],
                    f"üóë –†–æ–¥–∏—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Ä–µ–±—ë–Ω–∫–∞\n\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {user['first_name']} {user['last_name']} (@{user['username'] or '–Ω–µ—Ç'})\n"
                    f"üë∂ –£–¥–∞–ª—ë–Ω —Ä–µ–±—ë–Ω–æ–∫: {child['full_name']}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

    await callback.message.edit_text(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ '{child['full_name']}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=get_parent_menu()
    )